version: "3.3"

services:
  ##### MYSQL #####
  mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_PORT: ${DB_PORT}
      MYSQL_ROOT_PASSWORD: secret
    networks:
      - backend-network
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ##### RABBIT MQ3 #####

  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3.10.2-management-alpine
    # environment:
    #   - RABBITMQ_DEFAULT_USER=myuser
    #   - RABBITMQ_DEFAULT_PASS=mypassword
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    networks:
      - backend-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q check_running
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ##### ELASTICSEARCH #####
  es:
    depends_on:
      - mysql
      # mysql:
      #   condition: service_started
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ##### BACKEND #####
  backend:
    depends_on:
      - mysql
      - es
      - rabbitmq3
    image: ghcr.io/pakome/app-backend:1.3.0
    restart: always
    ports:
      - 8000:80
    networks:
      - backend-network
    environment:
      - APP_NAME=${APP_NAME}
      - APP_ENV=${APP_ENV}
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=${APP_DEBUG}
      - APP_URL=${APP_URL}
      - LOG_CHANNEL=${LOG_CHANNEL}

      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}

      - BROADCAST_DRIVER=${BROADCAST_DRIVER}
      - CACHE_DRIVER=${CACHE_DRIVER}
      - QUEUE_CONNECTION=${QUEUE_CONNECTION}
      - SESSION_DRIVER=${SESSION_DRIVER}
      - SESSION_LIFETIME=${SESSION_LIFETIME}

      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}

    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ##### FRONTEND #####

  frontend:
    depends_on:
      - backend
      - rabbitmq3
        # backend:
        #   condition: service_started
        # rabbitmq3:
        #   condition: service_healthy
    build:
      context: front
      dockerfile: Dockerfile
    image: acarou/angular-kubernetes:latest
    restart: always
    ports:
      - 80:80
    networks:
      - backend-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ### INDEXER ###
  indexer:
    depends_on:
      - backend
      - rabbitmq3
      # backend:
      #   condition: service_started
      # rabbitmq3:
      #   condition: service_healthy
    build:
      context: indexer
      dockerfile: Dockerfile
    image: acarou/indexer-kubernetes:latest

    restart: always

    environment:
      - AMQP_URI=${RABBITMQ_HOST}
      - ELASTICSEARCH_URI=${ELASTICSEARCH_URI}

    ports:
      - 8080:8080
    networks:
      - backend-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

  ############################## REPORTING ##############################

  reporting:
    depends_on:
      - backend
      # backend:
      #   condition: service_started
    build:
      context: reporting
      dockerfile: Dockerfile
    image: acarou/reporting-kubernetes:latest

    environment:
      - DB_URI=${DB_USERNAME}:${DB_PASSWORD}@tcp(mysql:${DB_PORT})/${DB_DATABASE}
      - WEBHOOK_URL=${WEBHOOK_URL}

    ports:
      - 8888:8888
    networks:
      - backend-network
    labels:
      kompose.service.type: nodeport
      kompose.service.expose: true

#Docker Networks
networks:
  backend-network:
    driver: bridge
#Docker Volumes
volumes:
  elasticsearch-data:
    driver: local
  mysql-data:
    driver: local
  rabbitmq-data:
    driver: local
  # memcached-data:
